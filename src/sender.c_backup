#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <errno.h>
#include <string.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <netdb.h>
#include "../include/linklist.h"
#include "../include/reliable_sender.h"
//#include "../include/reliable_udp.h"

list clients;
#define SENDER_PORT "7736"
#define RECEIVER_PORT "7735"
int mss=1500;
int sockfd;
char buf[1024]={0};
//	Write the data into the file from sender.

void *get_in_addr(struct sockaddr *sa)
{
    if (sa->sa_family == AF_INET) {
        return &(((struct sockaddr_in*)sa)->sin_addr);
    }
    return &(((struct sockaddr_in6*)sa)->sin6_addr);
}

void send_to_user(char* buf){
	printf("Got data %s\n",buf);
}
int verify_checksum(){
	return 0;
}

int32_t get_sequence_number(char *buf){
	int32_t sequence=atoi(buf);
	printf("Getting ACK value as %d\n",sequence);
	return sequence;
	
}

bool client_traversal(void *this_client_info){
        printf(" Client  IP :%s\n",(((client_data*)this_client_info)->IPADDR));
        return TRUE;
}

bool send_udp_packet(void * this_client_info){
	int numbytes=0;
	if ( ! ((client_data *)this_client_info)->got_ack ){
		numbytes=sendto(sockfd,(char*)buf,strlen(buf),0,(struct sockaddr *)&(((client_data *)this_client_info)->sock_addr),sizeof(struct sockaddr));
		if( numbytes == -1 ){
			perror("Sendto :");
		}
	}
	else {
		printf("This destination already has IP.. Skipping it\n");
	}
	return TRUE;
}
bool update_ack(void * this_client_info, char *destination_ip){
	if(!strcmp(destination_ip,((client_data *)this_client_info)->IPADDR)){
		printf("Destination IP %s matches with clinet list IP \n",destination_ip);
		((client_data *)this_client_info)->got_ack=1;
	}
	return TRUE;
}
bool clear_acks(void * this_client_info){
	((client_data *)this_client_info)->got_ack=0;
	return TRUE;
}

bool is_ack_done(void * this_client_info){
	if (((client_data *)this_client_info)->got_ack )
		return TRUE;
	return FALSE;
}

int main(int argc, char *argv[]){
	if( argc < 3 ){
		printf("Insufficient arguments .. Destination IP and MSS need but got total values %d\n",argc -1);
		exit(1);
	}
// 	Create a socket
	char destination_ip[20]={0};
	struct addrinfo hints,*p,*servinfo;
	struct sockaddr_storage their_addr;
    	socklen_t addr_len;
    	char s[INET6_ADDRSTRLEN];
	int rv,numbytes=0;
	int32_t expected_sequence_number=0;
	fd_set master;
	int fd_max;
 	struct timeval tv;
        tv.tv_usec = 0;
        tv.tv_sec = 10;

	memset(&hints,0,sizeof(hints));
	hints.ai_family=AF_INET;
	hints.ai_socktype=SOCK_DGRAM;
	mss=atoi(argv[1]);
	int total_clients = argc - 2,temp=0;
	struct client_data cd;
	printf("Creating %d client entries in the list\n",total_clients);
	list_new(&clients,sizeof(client_data),NULL);
	for(temp=0;temp<total_clients;temp++){
		memset(&cd,0,sizeof(client_data));
		strncpy(&cd.IPADDR[0],argv[temp + 2],IPV4_ADDRLEN);
		cd.sock_addr.sin_family=AF_INET;
		cd.sock_addr.sin_port=htons(atoi(RECEIVER_PORT));
		inet_pton(AF_INET,cd.IPADDR,&cd.sock_addr.sin_addr.s_addr);
		list_append(&clients, (void *)&cd);
	}
	list_for_each(&clients,client_traversal);
	printf(" Destination address is %s\n",argv[2]);	
	if ((rv = getaddrinfo(argv[1], RECEIVER_PORT, &hints, &servinfo)) != 0) {
        	fprintf(stderr, "getaddrinfo: %s\n", gai_strerror(rv));
        	return 1;
    	}
	for ( p = servinfo ; p!= NULL ; p = p->ai_next){
		if((sockfd=socket(p->ai_family,p->ai_socktype, p->ai_protocol))==-1){
			close(sockfd);
			perror("socket :");
			continue;
		}/*
		if ( bind(sockfd,p->ai_addr,p->ai_addrlen) == -1){
			perror("Bind :");
			close(sockfd);
			continue;
		}*/
		break;
	}	
	if ( p == NULL ){
		fprintf(stderr, "listener: failed to bind socket\n");
        	return 2;
	}
	freeaddrinfo(servinfo);
//	Check for Data on the socket
	int yes=0,retval,recv_done=0;
	fd_max=sockfd;
	int sent_sequence_num=0,received_ack_num=0,sent_bytes=-1;
	while(1){
//		while ( received_ack_num != sent_sequence_num + 1 ){
			printf("My ack val : %d and current received ack value %d\n",sent_sequence_num,received_ack_num);
			memset(&buf,0,sizeof(buf));
			memset(&destination_ip,0,sizeof(destination_ip));
			snprintf(&buf[0],sizeof(buf),"%d",sent_sequence_num);
			list_for_each(&clients,send_udp_packet);
			FD_ZERO(&master);
 			FD_SET(sockfd, &master);
                	retval = select(fd_max+1,&master,NULL,NULL,&tv);
			if (retval == -1){
                        	printf("Socket must have closed... Connection will just wait in loop now\n");   
                        	continue;
                	}
                	else if (retval){

				addr_len = sizeof their_addr;
				memset(&buf,0,sizeof(buf));
				printf(" **********************  Reading sent ack now ***********  \n");
				if ((numbytes = recvfrom(sockfd, buf, mss , 0,(struct sockaddr *)&their_addr, &addr_len)) == -1) {
					perror("recvfrom");
					exit(1);
				}
				snprintf(destination_ip,sizeof(destination_ip),"%s",inet_ntop(their_addr.ss_family, get_in_addr((struct sockaddr *)&their_addr),s, sizeof s));
				buf[numbytes] = '\0';

			//	If received data, verify checksum 
				if(verify_checksum() == 1){
					continue;
				}
				memset(&tv,0,sizeof(tv));	
				tv.tv_usec = 0;
				tv.tv_sec = 10;
			//	If checksum wrong discard the packet
				received_ack_num=get_sequence_number(buf);
				printf(" Destination %s responded with sequence num : %d and I wanted %d\n", destination_ip,received_ack_num,sent_sequence_num + 1);
				if ( received_ack_num == sent_sequence_num + 1 ){
					printf("Updating ACK flag for the current sequence number for this destinatio IP\n");
					list_for_each_update_ack(&clients,update_ack,destination_ip);

					printf("Check if all clients have received the data ?\n");
					recv_done=list_each_check_recv_complete(&clients,is_ack_done);	
					if( recv_done != 0 )
						continue;
					printf("Clearing all ACK flags and update next sequence number value\n");
					list_for_each(&clients,clear_acks);
					sent_sequence_num+=1;
				}
                	}
			else {
				memset(&tv,0,sizeof(tv));	
				tv.tv_usec = 0;
				tv.tv_sec = 10;
				printf("*************  TIMER has expired... resending the packets ******************** \n");
				continue;	
			}

		//	Check for sequence number..
		//	If sequence number is wrong, send ACK for required packet
		
//		}
	}
    	close(sockfd);
	return 0;
}
